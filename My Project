Remote Summer Internship Program 2020
 Machine Learning, Career Basic Program
 Smartinternz, SmartBridge
 



Predicting Life Expectancy using 
Machine Learning





Internship Report 
By
Aditya Reddy Lellapati



 


From:

SmartBridge Educational Services Pvt Ltd. Plot No 132, Above DCB bank, 2nd floor, Bapuji Nagar, Habsiguda,
Nacharam Main Road, Hyderabad – 500076


Date: 17/05/2020.

Dear Lellapati Aditya Reddy

SmartBridge Educational Services Pvt Ltd, is pleased to offer a training cum internship opportunity. During this period you would be associated with our mentors and The Smart Practice School Platform.

For further details you can contact us on +91 8499004200.




Thanks and Regards,




Ch. Jaya Prakash
Program Manager – SIP2020, Date: 17/05/2020.






1	INTRODUCTION
  1.1  Overview
  1.2  Purpose

2	LITERATURE SURVEY
  2.1  Existing problem
  2.2  Proposed solution

3	THEORITICAL ANALYSIS
  3.1  Block diagram
  3.2  Hardware / Software designing

4	EXPERIMENTAL INVESTIGATIONS

5	FLOWCHART

6	RESULT

7	ADVANTAGES & DISADVANTAGES

8	CONCLUSION

9	BIBILOGRAPHY
APPENDIX
A. Source code








INTRODUCTION
1.1 Overview
Program Information 
Summer Internship Program by Smartbridge in collaboration with IBM is an annual initiative taken up by them to teach and prepare students across the globe for industry experience. They believe that experiential learning and development in a professional like environment can only bridge the gap between students and industries opening ways for both of them to achieve better results. This initiative enables students to better their resume to embark upon a successful industrial journey. They provide various roles for internship according to the possible aptitude of the students such as Artificial Intelligence, Machine Learning, Internet of Things etc.
Remote Summer Internship Program 2020 is a 4-Weeks Industry Driven, Project based, Mentor supported Program. Selected interns will be joined to a project team, where he will learn the technology and complete the assigned tasks. SmartInternz platform provides the company like collaborative environment to build professional skills along with technical skills.
A project is assigned to students individually with access to the platform wherein the students code and deploy their model just like in industries. This not only introduces them to environments like IBM cloud but also helps them in understanding the industrial environment better. Classes are organised according to the technologies to be taught and doubt sessions are taken up by the mentors to help students complete their projects too.

1.2 Purpose
Project title	  : Predicting Life Expectancy using Machine Learning
Category	  : Machine Learning
Skills required : Python, IBM Cloud, IBM Watson
Problem Description 
A typical Regression Machine Learning project leverages historical data to predict insights into the future .This problem statement is aimed at predicting Life Expectancy rate of a country given various features. 
Life Expectancy is a statistical measue of the average time a human being is expected to live, Life expectancy depends on various factors : Regional variations, Economic Circumstacnes, Sex Differences, Mental Illnesses ,Physical Illnesses , Education, Year of the ir birth ans other demographic factors. This problem statement provides a way to predict average life expectancy of people living in a country when various factors such as year, GDP, education, alcohol intake of people in the country, expenditure on healthcare system and some specific disease related deaths that happened in the country are given.
The purpose of this project is that the people from various places can easily predict their life expectancy by providing the inputs asked by the model. This software can be used by all people in the world because the training part of this model contains inputs and predictions of more number of countries.
 Economic growth 
Predicting life expectancy would play a vital role in judging the growth and development of the economy. Across countries, high life expectancy is associated with high income per capita. Increase in life expectancy also leads to an increase in the “manpower” of a country. The knowledge asset of a country increases with the number of individuals in a country.
Population Growth 
Helps the government bodies take appropriate measures to control the population growth and also direct the utilization of the increase in human resources and skillset acquired by people over many years. 
Personal growth 
This project would also help an individual assess his/her lifestyle choices and alter them accordingly to lead a longer and healthier life. It would make them more aware of their general health and its improvement or deterioration over time. 
Growth in Health Sector 
Based on the factors used to calculate life expectancy of an individual and the outcome, health care will be able to fund and provide better services to those with greater need. 
Insurance Companies 
Insurance sector will be able to provide individualized services to people based on the life expectancy outcomes and factors.














LITERATURE SURVEY
2.1 Existing Problem
Although there have been lot of studies undertaken in the past on factors affecting life expectancy considering demographic variables, income composition and mortality rates. It was found that affect of immunization and human development index was not taken into account in the past. Also, some of the past research was done considering multiple linear regression based on data set of one year for all the countries. Hence, this gives motivation to resolve both the factors stated previously by formulating a regression model based on mixed effects model and multiple linear regression while considering data from a period of 2000 to 2015 for all the countries. Important immunization like Hepatitis B, Polio and Diphtheria will also be considered. In a nutshell, this study will focus on immunization factors, mortality factors, economic factors, social factors and other health related factors as well. Since the observations this dataset are based on different countries, it will be easier for a country to determine the predicting factor which is contributing to lower value of life expectancy. This will help in suggesting a country which area should be given importance in order to efficiently improve the life expectancy of its population.
The project relies on accuracy of data. The Global Health Observatory (GHO) data repository under World Health Organization (WHO) keeps track of the health status as well as many other related factors for all countries The data-sets are made available to public for the purpose of health data analysis. The data-set related to life expectancy, health factors for 193 countries has been collected from the same WHO data repository website and its corresponding economic data was collected from United Nation website. Among all categories of health-related factors only those critical factors were chosen which are more representative. It has been observed that in the past 15 years , there has been a huge development in health sector resulting in improvement of human mortality rates especially in the developing nations in comparison to the past 30 years. Therefore, in this project we have considered data from year 2000-2015 for 193 countries for further analysis. The individual data files have been merged together into a single data-set. On initial visual inspection of the data showed some missing values. As the data-sets were from WHO, we found no evident errors. Missing data was handled in R software by using Missmap command. The result indicated that most of the missing data was for population, Hepatitis B and GDP. The missing data were from less known countries like Vanuatu, Tonga, Togo, Cabo Verde etc. Finding all data for these countries was difficult and hence, it was decided that we exclude these countries from the final model data-set. The final merged file(final dataset) consists of 22 Columns and 2938 rows which meant 20 predicting variables. All predicting variables was then divided into several broad categories:Immunization related factors, Mortality factors, Economical factors and Social factors.






2.2 Proposed Solution
The project tries to create a model based on data provided by the World Health Organization (WHO) to evaluate the life expectancy for different countries in years. The data offers a timeframe from 2000 to 2015. The data originates from here: https://www.kaggle.com/kumarajarshi/life-expectancy-who/data. The output algorithms have been used to test if they can maintain their accuracy in predicting the life expectancy for data they haven’t been trained.
So many people were expecting to use a model of life expectancy prediction. In order to that, many institutions and companies are leading their team to build that model in this regard. In my project, I have proposed a solution to predict the life expectancy using machine learning. Machine Learning is the process of training the computer to think and decide solutions like human. The reason why I have chosen this architecture was only with the help of Machine Learning, deep understanding of the data and an ability to create a model can be done. Design a Regression model to predict life expectancy ratio of a given country based on some features provided such as year, GDP (gross domestic product), education, alcohol intake of people in the country, expenditure on healthcare system and some specific disease related deaths that happened in the country.
Methodology used
Work flow for this project can be divided into three sub-tasks. These include acquiring the data and understanding various features of the data, preprocessing the data set to align it with our requirements and remove any inconsistency, and finally analyzing the data using regression based prediction algorithm with the key performance index being accuracy of prediction.


THEORITICAL ANALYSIS
3.1 Block diagram



3.2 Hardware / Software designing
Project Planning and Kickoff
•	Understanding the project description and analyze the data and attributes in the given dataset.
•	Creating GitHub account
•	Installing Slack and create account with the mail id
•	Learning to use Zoho writer.
Explore IBM Cloud Platform
•	Creating IBM cloud account with the mail id
•	Creating IBM academic initiative account with the mail id
•	a Node-Red starter application.
Explore IBM Watson services
•	Exploring IBM Watson use cases.
•	Learning about IBM Watson Machine Learning.
Introduction to Watson Studio
•	Learning to build own Machine Learning model using IBM Watson.
•	Automate the Machine Learning Model
Predicting Life Expectancy with Python
•	Collecting Data set from www.kaggle.com
•	Creating IBM Watson services
•	Create a jupyter notebook and import data from Object storage.
Predicting Life Expectancy without Python
•	Import data set and create AutoAI experiment
•	Created Node-Red model and integrated with AutoAI





EXPERIMENTAL INVESTIGATIONS
Machine Learning Model
Algorithm Formulated to solve the given Problem Statement
Algorithm steps:
Step 1	:   Import the Data set
Step 2	:   Read and Understand the data 
Step3		:   Explore the Data set
Step4		:   Decide the amount of data for training data and testing data 
Step5		:   Give 70 percent data for training and remaining data for testing. 
Step6		:   Assign train data set to the models
Step7		:   Choose the algorithm and create the model
 Step8	:   Make predictions for test data set.
Step9             :   Calculate accuracy for the algorithm	
Step 10	:   Apply the model for further predictions.
Setting Up the Environment
An IBM cloud account was set up to access various services to create and deploy the model. The following services have been used in the project:
1.	Watson Studio - This is where the notebook has been created in a project to write the regression code along with the data set.
	
2.	Node Red - Node Red is the front end application that uses interconnecting nodes to interact with machine learning services of the cloud and the model to show predictions when inputs are given







Data Acquisition
The data set on Statistical Analysis on factors influencing Life Expectancy is provided in the smart internz platform . The below link helps in downloading the data set required to complete this project
https://www.kaggle.com/kumarajarshi/life-expectancy-who

Model Requirements
Python
Python is a multi-paradigm, general purpose, high level programming language, which focuses on code read- ability. It has a large library, which provides tools for many tasks and has a wide support base. This project uses python 3.5.
Python Libraries
Pandas : Pandas is used for data manipulation and analysis through operations and data structures on numerical tables and time series.

Numpy : It adds support as well as contains high-level mathematical functions to operate on large multidimensional arrays and matrices.

Matplotlib : It is a plotting library that that enables 2d diagramming and begetting of bar charts, histograms and so forth.

Sci-kit learn : It is a free software machine learning library that features various regression, clustering and classification algorithms. It works in conjunction with numPy and python scientific library sciPy.

Data Preprocessing
Data preprocessing is an essential step in order to increase the accuracy of machine learning models. It involves handling inaccurate and missing data, noisy data in the form of outliers, and inconsistent data in the form of duplication and others.
	
Data Cleaning
Data was often not consistent; missing values or values out of range was common. The methods used for cleaning is to replace the missing or noisy values by forward filling them using mean of the feature.





Analysis and Prediction
Linear Regression and Random Forest algorithm has been applied to the data set to train the model and increase the accuracy for prediction of the the life expectancy of any given country.

Data Transformation
Scaling : Scaling is required to standardize the independent feature in the dataset to a fixed range. Primarily, two types of feature scaling methods:
1.	Min-max scaling (Normalization) (value - min)/(max - min) Sklearn provides a class called MinMaxScaler for this
2.	Standardization (value - mean)/std Sklearn provides a class called StandardScaler for this

Evaluation Metrics
Evaluation metrics calculated are:
1.	Mean Cross validation score
2.	Score without cv
3.	R2score

Linear Regression
Linear Regression is a machine learning algorithm based on supervised learning. It performs a regression task. Regression models a target prediction value based on independent variables. It is mostly used for finding out the relationship between variables and forecasting. Different regression models differ based on – the kind of relationship between dependent and independent variables, they are considering and the number of independent variables being used. Linear regression performs the task to predict a dependent variable value (y) based on a given independent variable (x). So, this regression technique finds out a linear relationship between x (input) and y(output). Hence, the name is Linear Regression.

Random Forest Regression
Random forests is a supervised learning algorithm. It can be used both for classification and regression. It is also the most flexible and easy to use algorithm. A forest is comprised of trees. It is said that the more trees it has, the more robust a forest is. Random forests creates decision trees on randomly selected data samples, gets prediction from each tree and selects the best solution by means of voting. It also provides a pretty good indicator of the feature importance.
It technically is an ensemble method (based on the divide-and-conquer approach) of decision trees gener- ated on a randomly split dataset. This collection of decision tree classifiers is also known as the forest. The individual decision trees are generated using an attribute selection indicator such as information gain, gain ra- tio, and Gini index for each attribute. Each tree depends on an independent random sample. In a classification problem, each tree votes and the most popular class is chosen as the final result. In the case of regression, the average of all the tree outputs is considered as the final result. It is simpler and more powerful compared to the other non-linear classification algorithms.



Node Red Flow
A Node RED starter application was created to implement the front end of the project. In the starter appli- cation, nodes are dragged and dropped to create a flow to integrate the application with the machine learning model.
The following form appears after deployment of the app wherein the user can input values and life expectancy prediction is displayed acccording to the inputs.

 

NodeRed flow of the project


FLOWCHART



 

	
	
RESULT
The final UI of the project	
  


ADVANTAGES & DISADVANTAGES
Every coin has two faces, each face has its own property and features. It’s time to uncover the faces of ML. A very powerful tool that holds the potential to revolutionize the way things work.
Advantages 
1.Advantages of using IBM Watson:
•	Processes unstructured data 
•	Fills human limitations 
•	 Acts as a decision support system, doesn’t replace humans
•	 Improves performance + abilities by giving best available data
•	 Improve and transform customer service 
•	 Handle enormous quantities of data 
•	Sustainable Competitive Advantage
2. Easy for user to interact with the model via the UI. 
3. User-friendly
4. Easy to build and deploy.
 5. Doesn’t require much storage space.
Disadvantages 
1.Disadvantages of using IBM Watson
•	Seen as disruptive technology
•	 Maintenance 
•	Doesn't process structured data directly
•	 Increasing rate of data, with limited 
2. Not connected to database, hence no record of input.
 3. Requires internet connect








	Applications

Personalized Life Expectancy 
Individuals can predict their own life expectancy by inputting values in the corresponding fields. This could help make people more aware of their general health, and its improvement or deterioration over time. This may motivate them to make healthier lifestyle choices
Government 
It could help the government bodies take appropriate measures to control the population growth and also direct the utilization of the increase in human resources and skillset acquired by people over many years. Across countries, high life expectancy is associated with high income per capita. Increase in life expectancy also leads to an increase in the “manpower” of a country. The knowledge asset of a country increases with the number of individuals in a country. 
Health Sector
on the factors used to calculate life expectancy of an individual and the outcome, health care will be able to fund and provide better services to those with greater need.
Insurance Companies
 Insurance sector will be able to provide individualized services to people based on the life expectancy outcomes and factors.
























CONCLUSION
I have developed a model that will predict the life expectancy of a specific demographic region based on the inputs provided. Various factors have a significant impact on the life span such as Adult Mortality, Population, Under 5 Deaths, Thinness 1-5 Years, and Alcohol, HIV, Hepatitis B, GDP, Percentage Expenditure and many more. User can interact with the system via a simple user interface which is in the form of a form with input spaces which the user needs to fill the inputs into.
This was my first internship experience, through this I was able to enhance  my Machine Learning skills. Though I am a beginner in programming , with the help of the platform provided , It was an enriching experience as I got to work in a professional like environment. The mentors were very helpful with the webinars they conducted on how to proceed with the project. Our doubts were solved on the slack channel regularly.
I particularly found the IBM cloud experience new and useful in improving my industrial skills. The challenging task in this internship is in creating the Node Red flow as a beginner I have faced difficulties  but with the help of the mentors through slack channel platform I succeeded in my project , I found it to be valuable and productive  in developing my front end integration skills.
This internship has given me a transparent idea on how to proceed with improving my machine learning skills and I am grateful to Smart Bridge for letting me be a part of the Remote summer internship.
Finally I can proudly say that my lockdown period was very productive.

	BIBILOGRAPHY
Node-RED Starter Application
 https://developer.ibm.com/tutorials/how-to-create-a-node-red-starter-application/
Watson studio cloud
https://bookdown.org/caoying4work
Dataset Reference
https://www.kaggle.com/kumaraja rshi/life-expectancy-who
 IBM cloud services
https://www.youtube.com/watch?v=DBRGlAHdj48&amp;list=PLzpeuWUENMK2PYtasCaKK4bZjaYzhW23L
Import the data set into the jupyter notebook	
https://www.youtube.com/watch?v=Jtej3Y6uUng

APPENDIX
 Source code : Machine Learning Model 
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats.mstats import winsorize
import scipy.stats as stats
import warnings
warnings.filterwarnings('ignore')
%matplotlib inline

import types
import pandas as pd
from botocore.client import Config
import ibm_boto3

def __iter__(self): return 0

# @hidden_cell
# The following code accesses a file in your IBM Cloud Object Storage. It includes your credentials.
# You might want to remove those credentials before you share the notebook.
client_923e8e384f264883a1ce9afc6be73e3b = ibm_boto3.client(service_name='s3',
    ibm_api_key_id='kVvlaW0F-JK4Kw8MjI6KZi0DyeqxCcK2BKRPyuqIZ1Z2',
    ibm_auth_endpoint="https://iam.cloud.ibm.com/oidc/token",
    config=Config(signature_version='oauth'),
    endpoint_url='https://s3-api.us-geo.objectstorage.service.networklayer.com')

body = client_923e8e384f264883a1ce9afc6be73e3b.get_object(Bucket='predictinglifeexpectancyusingmach-donotdelete-pr-l1e3nrmukdnsd9',Key='Life_Expectacy_data.csv')['Body']
# add missing __iter__ method, so pandas accepts body as file-like object
if not hasattr(body, "__iter__"): body.__iter__ = types.MethodType( __iter__, body )

# If you are reading an Excel file into a pandas DataFrame, replace `read_csv` by `read_excel` in the next statement.
life = pd.read_csv(body)

life.head()

life.size

life.shape

life.columns

life.describe()

life.info()

life.isnull().sum()

country_list = life.Country.unique()
fill_list = ['Country', 'Year', 'Status', 'Life expectancy ', 'Adult Mortality',
       'infant deaths', 'Alcohol', 'percentage expenditure', 'Hepatitis B',
       'Measles ', ' BMI ', 'under-five deaths ', 'Polio', 'Total expenditure',
       'Diphtheria ', ' HIV/AIDS', 'GDP', 'Population',
       ' thinness  1-19 years', ' thinness 5-9 years',
       'Income composition of resources', 'Schooling']

for country in country_list:
    life.loc[life['Country'] == country,fill_list] = life.loc[life['Country'] == country,fill_list].interpolate()
life.dropna(inplace=True)

life.isna().sum()

col_dict = {'Life expectancy ':1 , 'Adult Mortality':2 ,
        'Alcohol':3 , 'percentage expenditure': 4, 'Hepatitis B': 5,
       'Measles ' : 6, ' BMI ': 7, 'under-five deaths ' : 8, 'Polio' : 9, 'Total expenditure' :10,
       'Diphtheria ':11, ' HIV/AIDS':12, 'GDP':13, 'Population' :14,
       ' thinness  1-19 years' :15, ' thinness 5-9 years' :16,
       'Income composition of resources' : 17, 'Schooling' :18, 'infant deaths':19}

plt.figure(figsize=(20,30))

for variable,i in col_dict.items():
                     plt.subplot(5,4,i)
                     plt.boxplot(life[variable],whis=1.5)
                     plt.title(variable)

plt.show()


for variable in col_dict.keys():
    q75, q25 = np.percentile(life[variable], [75 ,25])
    iqr = q75 - q25
    min_val = q25 - (iqr*1.5)
    max_val = q75 + (iqr*1.5)
    print("Number of outliers and percentage of it in {} : {} and {}".format(variable,
                                                                             len((np.where((life[variable] > max_val) | (life[variable] < min_val))[0])),
                                                                             len((np.where((life[variable] > max_val) | (life[variable] < min_val))[0]))*100/1987))

plt.figure(figsize=(18,6))

plt.subplot(1,2,1)
original_Life_Expectancy = life['Life expectancy ']
plt.boxplot(original_Life_Expectancy)
plt.title("original_Life_Expectancy")

plt.subplot(1,2,2)
winsorized_Life_Expectancy = winsorize(life['Life expectancy '],(0.01,0))
plt.boxplot(winsorized_Life_Expectancy)
plt.title("winsorized_Life_Expectancy")

plt.show()

plt.figure(figsize=(18,6))

plt.subplot(1,2,1)
original_Adult_Mortality = life['Adult Mortality']
plt.boxplot(original_Adult_Mortality)
plt.title("original_Adult_Mortality")

plt.subplot(1,2,2)
winsorized_Adult_Mortality = winsorize(life['Adult Mortality'],(0,0.03))
plt.boxplot(winsorized_Adult_Mortality)
plt.title("winsorized_Adult_Mortality")

plt.show()

plt.figure(figsize=(18,6))
plt.subplot(1,2,1)
original_Infant_Deaths = life['infant deaths']
plt.boxplot(original_Infant_Deaths)
plt.title("original_Infant_Deaths")

plt.subplot(1,2,2)
winsorized_Infant_Deaths = winsorize(life['infant deaths'],(0,0.10))
plt.boxplot(winsorized_Infant_Deaths)
plt.title("winsorized_Infant_Deaths")

plt.show()
plt.figure(figsize=(18,6))

plt.subplot(1,2,1)
original_Alcohol = life['Alcohol']
plt.boxplot(original_Alcohol)
plt.title("original_Alcohol")

plt.subplot(1,2,2)
winsorized_Alcohol = winsorize(life['Alcohol'],(0,0.01))
plt.boxplot(winsorized_Alcohol)
plt.title("winsorized_Alcohol")

plt.show()

plt.figure(figsize=(18,6))

plt.subplot(1,2,1)
original_Percentage_Exp = life['percentage expenditure']
plt.boxplot(original_Percentage_Exp)
plt.title("original_Percentage_Exp")

plt.subplot(1,2,2)
winsorized_Percentage_Exp = winsorize(life['percentage expenditure'],(0,0.12))
plt.boxplot(winsorized_Percentage_Exp)
plt.title("winsorized_Percentage_Exp")

plt.show()

plt.figure(figsize=(18,6))

plt.subplot(1,2,1)
original_HepatitisB = life['Hepatitis B']
plt.boxplot(original_HepatitisB)
plt.title("original_HepatitisB")

plt.subplot(1,2,2)
winsorized_HepatitisB = winsorize(life['Hepatitis B'],(0.11,0))
plt.boxplot(winsorized_HepatitisB)
plt.title("winsorized_HepatitisB")

plt.show()

plt.figure(figsize=(18,6))

plt.subplot(1,2,1)
original_Measles = life['Measles ']
plt.boxplot(original_Measles)
plt.title("original_Measles")

plt.subplot(1,2,2)
winsorized_Measles = winsorize(life['Measles '],(0,0.19))
plt.boxplot(winsorized_Measles)
plt.title("winsorized_Measles")

plt.show()

plt.figure(figsize=(18,6))

plt.subplot(1,2,1)
original_Under_Five_Deaths = life['under-five deaths ']
plt.boxplot(original_Under_Five_Deaths)
plt.title("original_Under_Five_Deaths")

plt.subplot(1,2,2)
winsorized_Under_Five_Deaths = winsorize(life['under-five deaths '],(0,0.12))
plt.boxplot(winsorized_Under_Five_Deaths)
plt.title("winsorized_Under_Five_Deaths")

plt.show()

plt.figure(figsize=(18,6))

plt.subplot(1,2,1)
original_Polio = life['Polio']
plt.boxplot(original_Polio)
plt.title("original_Polio")

plt.subplot(1,2,2)
winsorized_Polio = winsorize(life['Polio'],(0.09,0))
plt.boxplot(winsorized_Polio)
plt.title("winsorized_Polio")

plt.show()

plt.figure(figsize=(18,6))

plt.subplot(1,2,1)
original_Tot_Exp = life['Total expenditure']
plt.boxplot(original_Tot_Exp)
plt.title("original_Tot_Exp")

plt.subplot(1,2,2)
winsorized_Tot_Exp = winsorize(life['Total expenditure'],(0,0.01))
plt.boxplot(winsorized_Tot_Exp)
plt.title("winsorized_Tot_Exp")

plt.show()

plt.figure(figsize=(18,6))

plt.subplot(1,2,1)
original_Diphtheria = life['Diphtheria ']
plt.boxplot(original_Diphtheria)
plt.title("original_Diphtheria")

plt.subplot(1,2,2)
winsorized_Diphtheria = winsorize(life['Diphtheria '],(0.10,0))
plt.boxplot(winsorized_Diphtheria)
plt.title("winsorized_Diphtheria")

plt.show()

plt.figure(figsize=(18,6))

plt.subplot(1,2,1)
original_HIV = life[' HIV/AIDS']
plt.boxplot(original_HIV)
plt.title("original_HIV")

plt.subplot(1,2,2)
winsorized_HIV = winsorize(life[' HIV/AIDS'],(0,0.16))
plt.boxplot(winsorized_HIV)
plt.title("winsorized_HIV")

plt.show()

plt.figure(figsize=(18,6))

plt.subplot(1,2,1)
original_GDP = life['GDP']
plt.boxplot(original_GDP)
plt.title("original_GDP")

plt.subplot(1,2,2)
winsorized_GDP = winsorize(life['GDP'],(0,0.13))
plt.boxplot(winsorized_GDP)
plt.title("winsorized_GDP")

plt.show()

plt.figure(figsize=(18,6))

plt.subplot(1,2,1)
original_Population = life['Population']
plt.boxplot(original_Population)
plt.title("original_Population")

plt.subplot(1,2,2)
winsorized_Population = winsorize(life['Population'],(0,0.14))
plt.boxplot(winsorized_Population)
plt.title("winsorized_Population")

plt.show()

plt.figure(figsize=(18,6))

plt.subplot(1,2,1)
original_thinness_1to19_years = life[' thinness  1-19 years']
plt.boxplot(original_thinness_1to19_years)
plt.title("original_thinness_1to19_years")

plt.subplot(1,2,2)
winsorized_thinness_1to19_years = winsorize(life[' thinness  1-19 years'],(0,0.04))
plt.boxplot(winsorized_thinness_1to19_years)
plt.title("winsorized_thinness_1to19_years")

plt.show()

plt.figure(figsize=(18,6))

plt.subplot(1,2,1)
original_thinness_5to9_years = life[' thinness 5-9 years']
plt.boxplot(original_thinness_5to9_years)
plt.title("original_thinness_5to9_years")

plt.subplot(1,2,2)
winsorized_thinness_5to9_years = winsorize(life[' thinness 5-9 years'],(0,0.04))
plt.boxplot(winsorized_thinness_5to9_years)
plt.title("winsorized_thinness_5to9_years")

plt.show()

plt.figure(figsize=(18,6))

plt.subplot(1,2,1)
original_Income_Comp_Of_Resources = life['Income composition of resources']
plt.boxplot(original_Income_Comp_Of_Resources)
plt.title("original_Income_Comp_Of_Resources")

plt.subplot(1,2,2)
winsorized_Income_Comp_Of_Resources = winsorize(life['Income composition of resources'],(0.05,0))
plt.boxplot(winsorized_Income_Comp_Of_Resources)
plt.title("winsorized_Income_Comp_Of_Resources")

plt.show()

plt.figure(figsize=(18,6))

plt.subplot(1,2,1)
original_Schooling = life['Schooling']
plt.boxplot(original_Schooling)
plt.title("original_Schooling")

plt.subplot(1,2,2)
winsorized_Schooling = winsorize(life['Schooling'],(0.02,0.01))
plt.boxplot(winsorized_Schooling)
plt.title("winsorized_Schooling")

plt.show()

winsorized_list = [winsorized_Life_Expectancy,winsorized_Adult_Mortality,winsorized_Alcohol,winsorized_Measles,winsorized_Infant_Deaths,
            winsorized_Percentage_Exp,winsorized_HepatitisB,winsorized_Under_Five_Deaths,winsorized_Polio,winsorized_Tot_Exp,winsorized_Diphtheria,winsorized_HIV,winsorized_GDP,winsorized_Population,winsorized_thinness_1to19_years,winsorized_thinness_5to9_years,winsorized_Income_Comp_Of_Resources,winsorized_Schooling]

for variable in winsorized_list:
    q75, q25 = np.percentile(variable, [75 ,25])
    iqr = q75 - q25

    min_val = q25 - (iqr*1.5)
    max_val = q75 + (iqr*1.5)
    
    print("Number of outliers after winsorization in  : {} ".format(len(np.where((variable > max_val) | (variable < min_val))[0])))

life['winsorized_Life_Expectancy'] = winsorized_Life_Expectancy
life['winsorized_Adult_Mortality'] = winsorized_Adult_Mortality
life['winsorized_Infant_Deaths'] = winsorized_Infant_Deaths
life['winsorized_Alcohol'] = winsorized_Alcohol
life['winsorized_Percentage_Exp'] = winsorized_Percentage_Exp
life['winsorized_HepatitisB'] = winsorized_HepatitisB
life['winsorized_Under_Five_Deaths'] = winsorized_Under_Five_Deaths
life['winsorized_Polio'] = winsorized_Polio
life['winsorized_Tot_Exp'] = winsorized_Tot_Exp
life['winsorized_Diphtheria'] = winsorized_Diphtheria
life['winsorized_HIV'] = winsorized_HIV
life['winsorized_GDP'] = winsorized_GDP
life['winsorized_Population'] = winsorized_Population
life['winsorized_thinness_1to19_years'] = winsorized_thinness_1to19_years
life['winsorized_thinness_5to9_years'] = winsorized_thinness_5to9_years
life['winsorized_Income_Comp_Of_Resources'] = winsorized_Income_Comp_Of_Resources
life['winsorized_Schooling'] = winsorized_Schooling
life['winsorized_Measles'] = winsorized_Measles

life.head()

life.size

life.shape

life.describe()
all_col = ['Life expectancy ','winsorized_Life_Expectancy','Adult Mortality','winsorized_Adult_Mortality','infant deaths',
         'winsorized_Infant_Deaths','Alcohol','winsorized_Alcohol','percentage expenditure','winsorized_Percentage_Exp','Hepatitis B',
         'winsorized_HepatitisB','under-five deaths ','winsorized_Under_Five_Deaths','Polio','winsorized_Polio','Total expenditure',
         'winsorized_Tot_Exp','Diphtheria ','winsorized_Diphtheria',' HIV/AIDS','winsorized_HIV','GDP','winsorized_GDP',
         'Population','winsorized_Population',' thinness  1-19 years','winsorized_thinness_1to19_years',' thinness 5-9 years',
         'winsorized_thinness_5to9_years','Income composition of resources','winsorized_Income_Comp_Of_Resources',
         'Schooling','winsorized_Schooling','Measles ','winsorized_Measles','GDP','winsorized_GDP']

plt.figure(figsize=(15,75))

for i in range(len(all_col)):
    plt.subplot(19,2,i+1)
    plt.hist(life[all_col[i]])
    plt.title(all_col[i])

plt.show()

life.describe(include= 'O')
plt.figure(figsize=(6,6))
plt.bar(life.groupby('Status')['Status'].count().index,life.groupby('Status')['winsorized_Life_Expectancy'].mean())
plt.xlabel("Status",fontsize=12)
plt.ylabel("Avg Life_Expectancy",fontsize=12)
plt.title("Life_Expectancy w.r.t Status")
plt.show()

le_country = life.groupby('Country')['winsorized_Life_Expectancy'].mean().sort_values(ascending=True)
le_country.plot(kind='bar', figsize=(50,15), fontsize=25)
plt.title("Life_Expectancy w.r.t Country",fontsize=40)
plt.xlabel("Country",fontsize=35)
plt.ylabel("Avg Life_Expectancy",fontsize=35)
plt.show()

le_country = life.groupby('Country')['winsorized_GDP'].mean().sort_values(ascending=True)
le_country.plot(kind='bar', figsize=(50,15), fontsize=25)
plt.title("Average GDP w.r.t Country",fontsize=40)
plt.xlabel("Country",fontsize=35)
plt.ylabel("Avg GDP",fontsize=35)
plt.show()

le_country = life.groupby('Country')['winsorized_Adult_Mortality'].mean().sort_values(ascending=True)
le_country.plot(kind='bar', figsize=(50,15), fontsize=25)
plt.title("Adult_Mortality w.r.t Country",fontsize=40)
plt.xlabel("Country",fontsize=35)
plt.ylabel("Avg Adult Mortality",fontsize=35)
plt.show()

le_country = life.groupby('Country')['winsorized_Alcohol'].mean().sort_values(ascending=True)
le_country.plot(kind='bar', figsize=(50,15), fontsize=25)
plt.title("Alcohol w.r.t Country",fontsize=40)
plt.xlabel("Country",fontsize=35)
plt.ylabel("Avg Alcohol Comsumption",fontsize=35)
plt.show()

le_country = life.groupby('Country')['winsorized_Diphtheria'].mean().sort_values(ascending=True)
le_country.plot(kind='bar', figsize=(50,15), fontsize=25)
plt.title("Diphtheria w.r.t Country",fontsize=40)
plt.xlabel("Country",fontsize=35)
plt.ylabel("Avg Diphtheria",fontsize=35)
plt.show()

le_country = life.groupby('Country')['winsorized_HepatitisB'].mean().sort_values(ascending=True)
le_country.plot(kind='bar', figsize=(50,15), fontsize=25)
plt.title("HepatitisB w.r.t Country",fontsize=40)
plt.xlabel("Country",fontsize=35)
plt.ylabel("Avg HepatitisB",fontsize=35)
plt.show()

le_country = life.groupby('Country')['winsorized_HIV'].mean().sort_values(ascending=True)
le_country.plot(kind='bar', figsize=(50,15), fontsize=25)
plt.title("HIV w.r.t Country",fontsize=40)
plt.xlabel("Country",fontsize=35)
plt.ylabel("Avg HIV cases",fontsize=35)
plt.show()

le_country = life.groupby('Country')['winsorized_Income_Comp_Of_Resources'].mean().sort_values(ascending=True)
le_country.plot(kind='bar', figsize=(50,15), fontsize=25)
plt.title("Income Composition of Resources w.r.t Country",fontsize=40)
plt.xlabel("Country",fontsize=35)
plt.ylabel("Avg income composition of resourses",fontsize=35)
plt.show()

le_country = life.groupby('Country')['winsorized_Infant_Deaths'].mean().sort_values(ascending=True)
le_country.plot(kind='bar', figsize=(50,15), fontsize=25)
plt.title("Infant Deaths w.r.t Country",fontsize=40)
plt.xlabel("Country",fontsize=35)
plt.ylabel("Avg Infant Deaths",fontsize=35)
plt.show()

le_country = life.groupby('Country')['winsorized_Measles'].mean().sort_values(ascending=True)
le_country.plot(kind='bar', figsize=(50,15), fontsize=25)
plt.title("Measles w.r.t Country",fontsize=40)
plt.xlabel("Country",fontsize=35)
plt.ylabel("Avg Measles cases",fontsize=35)
plt.show()

le_country = life.groupby('Country')['winsorized_Percentage_Exp'].mean().sort_values(ascending=True)
le_country.plot(kind='bar', figsize=(50,15), fontsize=25)
plt.title("Percentage Expenditure w.r.t Country",fontsize=40)
plt.xlabel("Country",fontsize=35)
plt.ylabel("Avg percentage expenditure",fontsize=35)
plt.show()

le_country = life.groupby('Country')['winsorized_Polio'].mean().sort_values(ascending=True)
le_country.plot(kind='bar', figsize=(50,15), fontsize=25)
plt.title("Polio w.r.t Country",fontsize=40)
plt.xlabel("Country",fontsize=35)
plt.ylabel("Avg Polio Cases",fontsize=35)
plt.show()

le_country = life.groupby('Country')['winsorized_Population'].mean().sort_values(ascending=True)
le_country.plot(kind='bar', figsize=(50,15), fontsize=25)
plt.title("Population w.r.t Country",fontsize=40)
plt.xlabel("Country",fontsize=35)
plt.ylabel("Avg Population",fontsize=35)
plt.show()

le_country = life.groupby('Country')['winsorized_Schooling'].mean().sort_values(ascending=True)
le_country.plot(kind='bar', figsize=(50,15), fontsize=25)
plt.title("Schooling w.r.t Country",fontsize=40)
plt.xlabel("Country",fontsize=35)
plt.ylabel("Avg Schooling",fontsize=35)
plt.show()

le_country = life.groupby('Country')['winsorized_thinness_1to19_years'].mean().sort_values(ascending=True)
le_country.plot(kind='bar', figsize=(50,15), fontsize=25)
plt.title(" Thinness 1to19 years w.r.t Country",fontsize=40)
plt.xlabel("Country",fontsize=35)
plt.ylabel("Avg Thinness 1 to 19 Years",fontsize=35)
plt.show()

le_country = life.groupby('Country')['winsorized_thinness_5to9_years'].mean().sort_values(ascending=True)
le_country.plot(kind='bar', figsize=(50,15), fontsize=25)
plt.title("Thinness 5 to 9 years w.r.t Country",fontsize=40)
plt.xlabel("Country",fontsize=35)
plt.ylabel("Avg thinness 5 to 9 years ",fontsize=35)
plt.show()

le_country = life.groupby('Country')['winsorized_Tot_Exp'].mean().sort_values(ascending=True)
le_country.plot(kind='bar', figsize=(50,15), fontsize=25)
plt.title(" Total Expenditure w.r.t Country",fontsize=40)
plt.xlabel("Country",fontsize=35)
plt.ylabel("Avg Total Expenditure",fontsize=35)
plt.show()

le_country = life.groupby('Country')['winsorized_Under_Five_Deaths'].mean().sort_values(ascending=True)
le_country.plot(kind='bar', figsize=(50,15), fontsize=25)
plt.title(" Under five Deaths w.r.t Country",fontsize=40)
plt.xlabel("Country",fontsize=35)
plt.ylabel("Avg under 5 deaths",fontsize=35)
plt.show()

plt.figure(figsize=(7,5))
plt.bar(life.groupby('Year')['Year'].count().index,life.groupby('Year')['winsorized_Life_Expectancy'].mean(),color='green',alpha=0.65)
plt.xlabel("Year",fontsize=12)
plt.ylabel("Avg Life_Expectancy",fontsize=12)
plt.title("Life_Expectancy w.r.t Year")
plt.show()

corr= life.corr()
sns.heatmap(corr)
plt.figure(figsize=(18,40))

plt.subplot(6,3,1)
plt.scatter(life["winsorized_Life_Expectancy"], life["winsorized_Adult_Mortality"])
plt.title("LifeExpectancy vs AdultMortality")

plt.subplot(6,3,2)
plt.scatter(life["winsorized_Life_Expectancy"], life["winsorized_Infant_Deaths"])
plt.title("LifeExpectancy vs Infant_Deaths")

plt.subplot(6,3,3)
plt.scatter(life["winsorized_Life_Expectancy"], life["winsorized_Alcohol"])
plt.title("LifeExpectancy vs Alcohol")

plt.subplot(6,3,4)
plt.scatter(life["winsorized_Life_Expectancy"], life["winsorized_Percentage_Exp"])
plt.title("LifeExpectancy vs Percentage_Exp")

plt.subplot(6,3,5)
plt.scatter(life["winsorized_Life_Expectancy"], life["winsorized_HepatitisB"])
plt.title("LifeExpectancy vs HepatitisB")

plt.subplot(6,3,6)
plt.scatter(life["winsorized_Life_Expectancy"], life["winsorized_Under_Five_Deaths"])
plt.title("LifeExpectancy vs Under_Five_Deaths")

plt.subplot(6,3,7)
plt.scatter(life["winsorized_Life_Expectancy"], life["winsorized_Polio"])
plt.title("LifeExpectancy vs Polio")

plt.subplot(6,3,8)
plt.scatter(life["winsorized_Life_Expectancy"], life["winsorized_Tot_Exp"])
plt.title("LifeExpectancy vs Tot_Exp")

plt.subplot(6,3,9)
plt.scatter(life["winsorized_Life_Expectancy"], life["winsorized_Diphtheria"])
plt.title("LifeExpectancy vs Diphtheria")

plt.subplot(6,3,10)
plt.scatter(life["winsorized_Life_Expectancy"], life["winsorized_HIV"])
plt.title("LifeExpectancy vs HIV")

plt.subplot(6,3,11)
plt.scatter(life["winsorized_Life_Expectancy"], life["winsorized_GDP"])
plt.title("LifeExpectancy vs GDP")

plt.subplot(6,3,12)
plt.scatter(life["winsorized_Life_Expectancy"], life["winsorized_Population"])
plt.title("LifeExpectancy vs Population")

plt.subplot(6,3,13)
plt.scatter(life["winsorized_Life_Expectancy"], life["winsorized_thinness_1to19_years"])
plt.title("LifeExpectancy vs thinness_1to19_years")

plt.subplot(6,3,14)
plt.scatter(life["winsorized_Life_Expectancy"], life["winsorized_thinness_5to9_years"])
plt.title("LifeExpectancy vs thinness_5to9_years")

plt.subplot(6,3,15)
plt.scatter(life["winsorized_Life_Expectancy"], life["winsorized_Income_Comp_Of_Resources"])
plt.title("LifeExpectancy vs Income_Comp_Of_Resources")

plt.subplot(6,3,16)
plt.scatter(life["winsorized_Life_Expectancy"], life["winsorized_Schooling"])
plt.title("LifeExpectancy vs Schooling")


plt.show()

round(life[['Status','Life expectancy ']].groupby(['Status']).mean(),2)

stats.ttest_ind(life.loc[life['Status']=='Developed','Life expectancy '],life.loc[life['Status']=='Developing','Life expectancy '])

feature_df = life[['Status','winsorized_Life_Expectancy','winsorized_Income_Comp_Of_Resources','winsorized_HIV','winsorized_Adult_Mortality']]
feature_df = pd.concat([feature_df,pd.get_dummies(feature_df['Status'],drop_first=True)],axis=1)
final = feature_df.drop('Status',axis=1)
final.sample(10)

life = pd.concat([life,pd.get_dummies(life['Status'],drop_first=True)],axis=1)
life = life.drop('Status',axis=1)
life.sample(10)

life.columns

X= life[['winsorized_Adult_Mortality',
       'winsorized_Infant_Deaths', 'winsorized_Alcohol',
       'winsorized_Percentage_Exp', 'winsorized_HepatitisB',
       'winsorized_Under_Five_Deaths', 'winsorized_Polio',
       'winsorized_Tot_Exp', 'winsorized_Diphtheria', 'winsorized_HIV',
       'winsorized_GDP', 'winsorized_Population',
       'winsorized_thinness_1to19_years', 'winsorized_thinness_5to9_years',
       'winsorized_Income_Comp_Of_Resources', 'winsorized_Schooling',
       'winsorized_Measles', 'Developing']]

Y = life['winsorized_Life_Expectancy']

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state= 42)

print(X_train.shape)
print(Y_train.shape)
print(X_test.shape)
print(Y_test.shape)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error

model = LinearRegression(fit_intercept=True, normalize=True).fit(X_train, Y_train)
predictions= model.predict(X_test)
len(predictions)

predictions.shape

r2_score(predictions, Y_test)

mean_squared_error(predictions, Y_test)

mean_absolute_error(predictions, Y_test)

X = life[['winsorized_Adult_Mortality',
       'winsorized_Infant_Deaths', 'winsorized_Alcohol',
       'winsorized_Percentage_Exp', 'winsorized_HepatitisB',
       'winsorized_Under_Five_Deaths', 'winsorized_Polio',
       'winsorized_Tot_Exp', 'winsorized_Diphtheria', 'winsorized_HIV',
       'winsorized_GDP', 'winsorized_Population',
       'winsorized_thinness_1to19_years', 'winsorized_thinness_5to9_years',
       'winsorized_Income_Comp_Of_Resources', 'winsorized_Schooling',
        'Developing']]
Y = life['winsorized_Life_Expectancy']
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state= 42)
model = LinearRegression(fit_intercept=True, normalize=True).fit(X_train, Y_train)
predictions= model.predict(X_test)
len(predictions)

r2_score(predictions, Y_test)

mean_squared_error(predictions, Y_test)

mean_absolute_error(predictions, Y_test)

!pip install watson-machine-learning-client

from watson_machine_learning_client import WatsonMachineLearningAPIClient

client = WatsonMachineLearningAPIClient( wml_credentials )

model_props = {client.repository.ModelMetaNames.AUTHOR_NAME: "Aditya Reddy Lellapati", 
               client.repository.ModelMetaNames.AUTHOR_EMAIL: "19311a04c8@sreenidhi.edu.in", 
               client.repository.ModelMetaNames.NAME: "Life_Expectancy"}

model_artifact =client.repository.store_model(model, meta_props=model_props)

published_model_uid = client.repository.get_model_uid(model_artifact)

published_model_uid

deployment = client.deployments.create(published_model_uid, name="Life_Expectancy")

scoring_endpoint = client.deployments.get_scoring_url(deployment)

scoring_endpoint


